# # import cv2
# # import numpy as np
# # from google.colab.patches import cv2_imshow
# # import matplotlib.pyplot as plt
# # from skimage import io
# # from medpy.filter.smoothing import anisotropic_diffusion
# # from skimage import img_as_float
# # from skimage.metrics import peak_signal_noise_ratio


# # #pip install bm3d


# # #tif image problem
# # noisy_img = img_as_float(io.imread("Flower.tif", as_gray= True))
# # ref_img = img_as_float(io.imread("Flower_clean.tif"))


# # simga_est = np.mean(estimate_sigma(noisy_img,multichannel = False))


# # NLM_skimg_denoise_img = denoise_nl_means(noisy_img, h = 1.15 * sigma_est, fast_mode = True, patch_size = 9, patch_distance = 5, multichannel = False )


# # noise_psnr = peak_signal_noise_ratio(ref_img, noisy_img)
# # NLM_skimg_cleaned_psnr = peak_signal_noise_ratio(ref_img, NLM_skimg_denoise_img)


# # print(" SNR of input noisy image =  ", noise_psnr)
# # print("PSNR of cleaned image = ", NLM_skimg_cleaned_psnr)




# # denoise_img_as_8byte = img_as_ubyte(NLM_skimg_denoise_img)


# # image = cv2.imread('Flower.jpg')


# # def to_gray(input_image):


# #   gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)


# #   cv2_imshow(image)
# #   cv2_imshow(gray)


# #   cv2.waitKey(0)
# #   cv2.destroyAllWindows()
# # to_gray('Flower.jpg')


# # # segmenentation - black and white
# #  import cv2
# # import numpy as np


# # img = cv2.imread("image_name.jpg")


# # gray = cv2.cvtColo(img, cv2.COLOR_BGR2GRAY)
# # _, tresh = cv2.threshold(gray, np.mean(gray), 255, cv2.THRESH_BINARY_INV)


# # cv2.imshow("original", img)
# # cv2.waitkey(0)


# # cv2.destroyAllWindows()


# # #segmentation
# # countours, hierarchy = cv2.findContours(tresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)


# # print(len(contours))


# # cnt = sorted(countours, key = cv2.countourArea)[-1]


# # mask = np.zeros((750,1038), dtype = "unit8")
# # maskedRed = cv2.drawCountours(mask, [cnt], -1, (0, 0, 255), -1)
# # maskedFinal = cv2.drawCountours(mask, [cnt], -1, (255, 255, 255), -1)


# # finalImage = cv2.bitwise_and(img, img, mask= maskedFinal)
# # cv2.imshow("original", img)
# # cv2.imshow("tresh", tresh)
# # cv2.waitKey(0)
# # cv2.destroyAllWinsow()




# #using physical dimensions instead of pizels


# from skimage import io
# import numpy as np
# from matplotlib import pyplot as plt
# from skimage import img_as_float




# my_image = io.imread("image.jpg")
# print(my_image.min(), my_image.max())
# plt.imshow(my_image)


# # my_float_image = img_as_float(my_image)
# # print(my_float_image.min(), my_float_image.max())
# my_image[10:200, 10:200,:] = [255, 0,0]
# plt.imshow(my_image)
       
